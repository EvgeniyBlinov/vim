# Set prefix to space.
unbind C-b
set -g prefix C-Space

# Bindings:
# - to see current bindings:
#   list-keys -t {vi,emacs}-{edit,choice,copy}

##########################   BIND    ###################################
##########################   SPLIT   #####################################
# Open new/split panes with the path of the current pane.
unbind c
bind c new-window -c '#{pane_current_path}'
unbind %
bind % split-window -h -c '#{pane_current_path}'
unbind '"'
bind '"' split-window -v -c '#{pane_current_path}'

# Intuitive window-splitting keys.
bind '|' split-window -h -c '#{pane_current_path}' # normally prefix-%
bind '\' split-window -h -c '#{pane_current_path}' # normally prefix-%
bind '-' split-window -v -c '#{pane_current_path}' # normally prefix-"
##########################   SPLIT   #####################################
##########################   PANELS  #####################################
## Join windows: <prefix> s, <prefix> j
unbind j
bind-key j choose-window "join-pane -h -s "%%""
unbind s
bind-key s choose-window "join-pane -h -t "%%""
## To swap the current window with the top window, do
#swap-window -t 0
## In the unlikely case of having no window at index 0, do
#move-window -t 0
########################################################################
bind e setw synchronize-panes on
bind E setw synchronize-panes off
##########################   PANELS  #####################################

# Vim-like key bindings for pane navigation (default uses cursor keys).
#unbind h
#bind h select-pane -L
#unbind j
#bind j select-pane -D
#unbind k
#bind k select-pane -U
#unbind l # normally used for last-window
#bind l select-pane -R

# Resizing (mouse also works).
#unbind Left
#bind -r Left resize-pane -L 5
#unbind Right
#bind -r Right resize-pane -R 5
#unbind Down
#bind -r Down resize-pane -D 5
#unbind Up
#bind -r Up resize-pane -U 5
bind / select-pane -t :.+
bind = setw synchronize-panes


# Fast toggle (normally prefix-l).
unbind ^space
bind ^space last-window

# Restore pre-2.1 behavior of scrolling with the scrollwheel in Vim, less, copy
# mode etc, otherwise entering copy mode if not already in it.
#
#   if in copy mode (pane_in_mode) || using the mouse already (mouse_any_flag)
#     pass through mouse events to current pane (send -Mt=)
#   elsif in alternate screen mode
#     send `Up` key
#   else
#     enter copy mode (-e exits if we scroll to the bottom)
#   end
#
#@TODO blinov 2017-03-19: fix it
bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# Stay in copy mode on drag end, but otherwise exit for mouse up.
# Requires patch from https://github.com/tmux/tmux/issues/326
#@TODO blinov 2017-03-19: fix it
#unbind-key -T copy-mode-vi MouseDragEnd1Pane
#bind-key -T copy-mode-vi MouseUp1Pane cancel

## For those times when C-c and q are not enough.
##@TODO blinov 2017-03-19: fix it
#bind-key -T copy-mode-vi Escape cancel

#bind-key -T copy-mode-vi 'v' begin-selection
#bind-key -T copy-mode-vi y copy-pipe 'xclip -in -selection clipboard'

## Clipper.
#bind-key y run-shell "tmux save-buffer - | nc -U ~/.clipper.sock"
## "copy-pipe" requires tmux >= 1.8
#bind-key -T copy-mode-vi Enter copy-pipe "nc -U ~/.clipper.sock"

bind-key -T edit-mode-vi Up   send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down

unbind-key -T copy-mode-vi Space     ;   bind-key -T copy-mode-vi v   send-keys -X begin-selection
unbind-key -T copy-mode-vi Enter     ;   bind-key -T copy-mode-vi y   send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
unbind-key -T copy-mode-vi C-v       ;   bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi [         ;   bind-key -T copy-mode-vi [   send-keys -X begin-selection
unbind-key -T copy-mode-vi ]         ;   bind-key -T copy-mode-vi ]   send-keys -X copy-selection
##########################   BIND    ###################################


# Status bar.
set -g status-bg '#343d46'
set -g status-fg white
set -g status-left-length 40
set -g status-left '#[fg=yellow]#S â§‰ '
set -g status-right "#[fg=white]$USER@#h | #[fg=white]%k:%M  "
set -g status-interval 60 # Default is 15.

# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set -g renumber-windows on

# Highlight active window.
#set -w -g window-status-current-bg yellow

# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. For default bindings see `tmux list-keys` and `tmux
# list-keys -t vi-copy`.
set -g mouse on
#set -g mouse-utf8 off
#set -g mode-mouse off


# Slightly more useful width in "main-vertical" layout; enough room for 3-digit
# line number gutter in Vim + 80 columns of text + 1 column breathing room
# (default looks to be about 79).
set -w -g main-pane-width 85

set-option -g xterm-keys on
set-window-option -g xterm-keys on
#set -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color"
set -ga terminal-overrides ',xterm-256color:Tc'
# \033]112\007 "reset cursor color" fix
set-option -ag terminal-overrides ',xterm*:Cr=\E]12;gray\007'


set -g history-limit 262144

# Start window and pane numbering at 1, (0 is too hard to reach).
set -g base-index 1
set -g pane-base-index 1

# Don't wait for an escape sequence after seeing C-a.
set -s escape-time 0

# Delay time for sending commands
set-window-option -g escape-time 1
# Delay time for repeating commands
set-window-option -g repeat-time 1


# Dynamically update iTerm tab and window titles.
set -g set-titles on

# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
set -g focus-events on

# But don't change tmux's own window titles.
set -w -g automatic-rename off

# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set -w -g wrap-search off

# #T      = standard window title (last command, see ~/.bash_profile)
# #h      = short hostname
# #S      = session name
# #W      = tmux window name
#
# (Would love to include #(pwd) here as well, but that would only print the
# current working directory relative to the session -- ie. always the starting
# cwd -- which is not very interesting).
set -g set-titles-string "#T : #h > #S > #W"

# Show bells in window titles.
set -g window-status-bell-style fg=yellow,bold,underscore

########################################################################
